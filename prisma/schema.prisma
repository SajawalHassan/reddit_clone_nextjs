generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique

  displayName           String
  about                 String?
  bannerUrl             String? @db.Text
  email                 String  @db.Text
  imageUrl              String  @db.Text
  allowFollows          Boolean @default(true)
  contentIsVisible      Boolean @default(true)
  showJoinedCommunities Boolean @default(true)
  karma                 Int     @default(1)

  pinnedPosts        Post[]
  upvotedPosts       PostProfileUpvotes[]
  downvotedPosts     PostProfileDownvotes[]
  upvotedComments    CommentProfileUpvotes[]
  downvotedComments  CommentProfileDownvotes[]
  createdCommunities Community[]
  members            Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommunityType {
  PUBLIC
  RESTRICTED
  PRIVATE
}

model Community {
  id String @id @default(uuid())

  name        String
  uniqueName  String        @unique
  description String?       @db.LongText
  imageUrl    String        @db.Text
  bannerUrl   String?       @db.Text
  type        CommunityType @default(PUBLIC)

  rules   CommunityRule[]
  members Member[]
  posts   Post[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model CommunityRule {
  id   String @id @default(uuid())
  rule String

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
}

enum MemberRole {
  GUEST
  MODERATOR
  ADMIN
}

model Member {
  id String @id @default(uuid())

  role MemberRole @default(GUEST)

  posts    Post[]
  comments Comment[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  communityId String
  communitiy  Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
}

model Post {
  id String @id @default(uuid())

  title    String
  content  String?
  imageUrl String? @db.Text
  link     String? @db.Text
  spoiler  Boolean @default(false)

  comments  Comment[]
  upvotes   PostProfileUpvotes[]
  downvotes PostProfileDownvotes[]

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  pinnedPostProfileId String?
  pinnedPostProfile   Profile? @relation(fields: [pinnedPostProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([pinnedPostProfileId])
  @@index([communityId])
}

model PostProfileUpvotes {
  id String @id @default(uuid())

  postId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([profileId])
}

model PostProfileDownvotes {
  id String @id @default(uuid())

  postId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([profileId])
}

model Comment {
  id String @id @default(uuid())

  content  String  @db.LongText
  imageUrl String?

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId  String?
  parent    Comment?                  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[]                 @relation("ParentChild")
  upvotes   CommentProfileUpvotes[]
  downvotes CommentProfileDownvotes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([postId])
  @@index([parentId])
}

model CommentProfileUpvotes {
  id String @id @default(uuid())

  commentId String  @unique
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([profileId])
}

model CommentProfileDownvotes {
  id String @id @default(uuid())

  commentId String  @unique
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([profileId])
}
